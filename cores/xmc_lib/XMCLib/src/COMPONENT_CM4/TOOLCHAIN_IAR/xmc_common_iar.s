/**
 * @file xmc_common_iar.c
 * @brief Assembly routines for IAR Embedded Workbench IDE.
 * @cond
 *****************************************************************************
 * XMClib - XMC Peripheral Driver Library
 *
 * Copyright (c) 2015-2022, Infineon Technologies AG
 * All rights reserved.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * To improve the quality of the software, users are encouraged to share
 * modifications, enhancements or bug fixes with Infineon Technologies AG
 * at XMCSupport@infineon.com.
 *****************************************************************************
 * @endcond
 */


    SECTION .text:CODE:ROOT(4)
    PUBLIC XMC_DelayCycles
    PUBLIC XMC_EnterCriticalSection
    PUBLIC XMC_ExitCriticalSection
    THUMB


/*******************************************************************************
* Function Name: XMC_DelayCycles
****************************************************************************//**
*
* Delays for the specified number of cycles.
*
* @param uint32_t cycles: The number of cycles to delay.
*
*******************************************************************************/
/* void XMC_DelayCycles(uint32_t cycles) */

XMC_DelayCycles:
    ADDS r0, r0, #2
    LSRS r0, r0, #2
    BEQ XMC_DelayCycles_done
XMC_DelayCycles_loop:
    ADDS r0, r0, #1
    SUBS r0, r0, #2
    BNE XMC_DelayCycles_loop
    NOP
XMC_DelayCycles_done:
    BX lr

/*******************************************************************************
* Function Name: XMC_EnterCriticalSection
****************************************************************************//**
*
* XMC_EnterCriticalSection disables interrupts and returns a value
* indicating whether interrupts were previously enabled.
*
* Note Implementation of XMC_EnterCriticalSection manipulates the IRQ
* enable bit with interrupts still enabled. The test and set of the interrupt
* bits are not atomic. Therefore, to avoid corrupting processor state, it must
* be the policy that all interrupt routines restore the interrupt enable bits
* as they were found on entry.
*
* \return Returns 0 if interrupts were previously enabled or 1 if interrupts
* were previously disabled.
*
*******************************************************************************/
/* uint8_t XMC_EnterCriticalSection(void) */

XMC_EnterCriticalSection:
    MRS r0, PRIMASK         ; Save and return an interrupt state.
    CPSID I                 ; Disable interrupts.
    BX lr

/*******************************************************************************
* Function Name: XMC_ExitCriticalSection
****************************************************************************//**
*
* XMC_ExitCriticalSection re-enables the interrupts if they were enabled
* before XMC_EnterCriticalSection was called. The argument should be the
* value returned from XMC_EnterCriticalSection.
*
*  \param uint8_t savedIntrStatus:
*   The saved interrupt status returned by the
*   \ref XMC_EnterCriticalSection().
*
*******************************************************************************/
/* void XMC_ExitCriticalSection(uint8_t savedIntrStatus) */

XMC_ExitCriticalSection:
    MSR PRIMASK, r0         ; Restore the interrupt state.
    BX lr

    END
