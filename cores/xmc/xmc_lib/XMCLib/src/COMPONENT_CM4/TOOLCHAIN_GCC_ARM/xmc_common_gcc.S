/**
 * @file xmc_common_gcc.c
 * @brief Assembly routines for GNU GCC.
 * @cond
 *****************************************************************************
 * XMClib - XMC Peripheral Driver Library
 *
 * Copyright (c) 2015-2022, Infineon Technologies AG
 * All rights reserved.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * To improve the quality of the software, users are encouraged to share
 * modifications, enhancements or bug fixes with Infineon Technologies AG
 * at XMCSupport@infineon.com.
 *****************************************************************************
 * @endcond
 */


.syntax unified
.text
.thumb


/*******************************************************************************
* Function Name: XMC_DelayCycles
****************************************************************************//**
*
* Delays for the specified number of cycles.
*
* @param uint32_t cycles: The number of cycles to delay.
*
*******************************************************************************/
/* void XMC_DelayCycles(uint32_t cycles) */
.align 3                    /* Align to 8 byte boundary (2^n) */
.global XMC_DelayCycles
.func XMC_DelayCycles, XMC_DelayCycles
.type XMC_DelayCycles, %function
.thumb_func
XMC_DelayCycles:
                             /* cycles bytes */
    ADDS r0, r0, #2          /*    1    2    Round to nearest multiple of 4 */
    LSRS r0, r0, #2          /*    1    2    Divide by 4 and set flags */
    BEQ XMC_DelayCycles_done /*    2    2    Skip if 0 */

XMC_DelayCycles_loop:
    ADDS r0, r0, #1          /*    1    2    Increment counter */
    SUBS r0, r0, #2          /*    1    2    Decrement counter by 2 */
    BNE XMC_DelayCycles_loop /*   (1)2  2    2 CPU cycles (if branch is taken) */
    NOP                      /*    1    2    Loop alignment padding */

XMC_DelayCycles_done:
    NOP                      /*    1    2    Loop alignment padding */
    BX lr                    /*    3    2 */

.endfunc


/*******************************************************************************
* Function Name: XMC_EnterCriticalSection
****************************************************************************//**
*
* XMC_EnterCriticalSection disables interrupts and returns a value
* indicating whether interrupts were previously enabled.
*
* Note Implementation of XMC_EnterCriticalSection manipulates the IRQ
* enable bit with interrupts still enabled.
*
* \return Returns 0 if interrupts were previously enabled or 1 if interrupts
* were previously disabled.
*
*******************************************************************************/
/* uint8_t XMC_EnterCriticalSection(void) */
.global XMC_EnterCriticalSection
.func XMC_EnterCriticalSection, XMC_EnterCriticalSection
.type XMC_EnterCriticalSection, %function
.thumb_func

XMC_EnterCriticalSection:
    MRS r0, PRIMASK         /* Save and return interrupt state */
    cpsid i                 /* Disable interrupts */
    BX lr

.endfunc


/*******************************************************************************
* Function Name: XMC_ExitCriticalSection
****************************************************************************//**
*
*  Re-enables interrupts if they were enabled before
*  XMC_EnterCriticalSection() was called. The argument should be the value
*  returned from \ref XMC_EnterCriticalSection().
*
*  \param uint8_t savedIntrStatus:
*   Saved interrupt status returned by the \ref XMC_EnterCriticalSection().
*
*******************************************************************************/
/* void XMC_ExitCriticalSection(uint8_t savedIntrStatus) */
.global XMC_ExitCriticalSection
.func XMC_ExitCriticalSection, XMC_ExitCriticalSection
.type XMC_ExitCriticalSection, %function
.thumb_func

XMC_ExitCriticalSection:
    MSR PRIMASK, r0         /* Restore interrupt state */
    BX lr

.endfunc

.end

/* [] END OF FILE */
