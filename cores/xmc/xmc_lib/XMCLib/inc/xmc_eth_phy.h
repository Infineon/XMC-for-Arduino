/**
 * @file xmc_eth_phy.h
 *
 * @cond
 *****************************************************************************
 * XMClib - XMC Peripheral Driver Library
 *
 * Copyright (c) 2015-2023, Infineon Technologies AG
 * All rights reserved.
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * To improve the quality of the software, users are encouraged to share
 * modifications, enhancements or bug fixes with Infineon Technologies AG
 * at XMCSupport@infineon.com.
 *****************************************************************************
 *
 * @endcond
 */


/**
 * @addtogroup ETH_PHY
 * @brief Ethernet PHY driver for XMC4000 microcontroller family.
 *
 * The XMC_ETH_PHY low level driver provides functions used by XMC_ETH_MAC.
 * @{
 */

#ifndef XMC_ETH_PHY_H
#define XMC_ETH_PHY_H

/*******************************************************************************
 * INCLUDES
 *******************************************************************************/

#include "xmc_eth_mac.h"

/*******************************************************************************
 * ENUMS
 *******************************************************************************/

/**
 * ETH PHY status returns
 */
typedef enum XMC_ETH_PHY_STATUS
{
  XMC_ETH_PHY_STATUS_OK              = 0U, /**< OK. All is well! */
  XMC_ETH_PHY_STATUS_BUSY            = 1U, /**< Busy */
  XMC_ETH_PHY_STATUS_ERROR           = 2U, /**< Error */
  XMC_ETH_PHY_STATUS_ERROR_DEVICE_ID = 3U, /**< Error in device identifier */
  XMC_ETH_PHY_STATUS_ERROR_TIMEOUT   = 4U  /**< Time-out error */
} XMC_ETH_PHY_STATUS_t;

/*******************************************************************************
 * DATA STRUCTURES
 *******************************************************************************/

/**
 * ETH PHY configuration
 */
typedef struct XMC_ETH_PHY_CONFIG
{
  XMC_ETH_LINK_INTERFACE_t interface; /**< Link interface */
  XMC_ETH_LINK_SPEED_t speed;         /**< ETH speed: 100M or 10M? */
  XMC_ETH_LINK_DUPLEX_t duplex;       /**< Half or full duplex? */
  bool enable_auto_negotiate;         /**< Enable auto-negotiate? */
  bool enable_loop_back;              /**< Enable loop-back? */
} XMC_ETH_PHY_CONFIG_t;

/*******************************************************************************
 * API PROTOTYPES
 *******************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 * @param phy_addr Physical address
 * @param config A constant pointer to XMC_ETH_PHY_CONFIG_t, pointing to a physical layer config
 * @return int32_t return status XMC_ETH_PHY_STATUS_t
 *
 * \par<b>Description: </b><br>
 * Initialize the ETH physical layer interface <br>
 *
 * \par
 * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 * and loop-back settings.
 */
int32_t XMC_ETH_PHY_Init(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, const XMC_ETH_PHY_CONFIG_t *const config);

/**
 * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 * @param phy_addr Physical address
 * @return int32_t return status XMC_ETH_PHY_STATUS_t
 *
 * \par<b>Description: </b><br>
 * Enter power down mode <br>
 *
 */
int32_t XMC_ETH_PHY_PowerDown(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr);

/**
 * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 * @param phy_addr Physical address
 * @return int32_t return status XMC_ETH_PHY_STATUS_t
 *
 * \par<b>Description: </b><br>
 * Exit power down mode <br>
 *
 */
int32_t XMC_ETH_PHY_ExitPowerDown(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr);

/**
 * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 * @param phy_addr Physical address
 * @return int32_t return status XMC_ETH_PHY_STATUS_t
 *
 * \par<b>Description: </b><br>
 * Reset transciver <br>
 *
 */
int32_t XMC_ETH_PHY_Reset(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr);

/**
 * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 * @param phy_addr Physical address
 * @return XMC_ETH_LINK_STATUS_t ETH link status
 *
 * \par<b>Description: </b><br>
 * Get link status <br>
 *
 * \par
 * The function reads the physical layer interface and returns the link status.
 * It returns either ::XMC_ETH_LINK_STATUS_UP or ::XMC_ETH_LINK_STATUS_DOWN.
 */
XMC_ETH_LINK_STATUS_t XMC_ETH_PHY_GetLinkStatus(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr);

/**
 * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 * @param phy_addr Physical address
 * @return XMC_ETH_LINK_SPEED_t ETH link speed
 *
 * \par<b>Description: </b><br>
 * Get link speed <br>
 *
 * \par
 * The function reads the physical layer interface and returns the link speed.
 * It returns either ::XMC_ETH_LINK_SPEED_100M or ::XMC_ETH_LINK_SPEED_10M.
 */
XMC_ETH_LINK_SPEED_t XMC_ETH_PHY_GetLinkSpeed(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr);

/**
 * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 * @param phy_addr Physical address
 * @return XMC_ETH_LINK_DUPLEX_t ETH link duplex settings
 *
 * \par<b>Description: </b><br>
 * Get link duplex settings <br>
 *
 * \par
 * The function reads the physical layer interface and returns the link duplex settings.
 * It returns either ::XMC_ETH_LINK_DUPLEX_FULL or ::XMC_ETH_LINK_DUPLEX_HALF.
 */
XMC_ETH_LINK_DUPLEX_t XMC_ETH_PHY_GetLinkDuplex(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr);

/**
 * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 * @param phy_addr Physical address
 * @return bool True if autonegotiation process is finished otherwise false
 *
 * \par<b>Description: </b><br>
 * Get status of autonegotiation <br>
 */
bool XMC_ETH_PHY_IsAutonegotiationCompleted(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr);

#ifdef __cplusplus
}
#endif

/**
 * @}
 */


#endif /* XMC_ETH_PHY_H */
